// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	repository "github.com/Niiazgulov/urlshortener.git/internal/service/repository"
	gomock "github.com/golang/mock/gomock"
)

// MockAddorGetURL is a mock of AddorGetURL interface.
type MockAddorGetURL struct {
	ctrl     *gomock.Controller
	recorder *MockAddorGetURLMockRecorder
}

// MockAddorGetURLMockRecorder is the mock recorder for MockAddorGetURL.
type MockAddorGetURLMockRecorder struct {
	mock *MockAddorGetURL
}

// NewMockAddorGetURL creates a new mock instance.
func NewMockAddorGetURL(ctrl *gomock.Controller) *MockAddorGetURL {
	mock := &MockAddorGetURL{ctrl: ctrl}
	mock.recorder = &MockAddorGetURLMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAddorGetURL) EXPECT() *MockAddorGetURLMockRecorder {
	return m.recorder
}

// AddURL mocks base method.
func (m *MockAddorGetURL) AddURL(u repository.URL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddURL", u)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddURL indicates an expected call of AddURL.
func (mr *MockAddorGetURLMockRecorder) AddURL(u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddURL", reflect.TypeOf((*MockAddorGetURL)(nil).AddURL), u)
}

// BatchURL mocks base method.
func (m *MockAddorGetURL) BatchURL(ctx context.Context, userID string, originalurls []repository.URL) ([]repository.ShortCorrelation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchURL", ctx, userID, originalurls)
	ret0, _ := ret[0].([]repository.ShortCorrelation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchURL indicates an expected call of BatchURL.
func (mr *MockAddorGetURLMockRecorder) BatchURL(ctx, userID, originalurls interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchURL", reflect.TypeOf((*MockAddorGetURL)(nil).BatchURL), ctx, userID, originalurls)
}

// Close mocks base method.
func (m *MockAddorGetURL) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockAddorGetURLMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockAddorGetURL)(nil).Close))
}

// DeleteUrls mocks base method.
func (m *MockAddorGetURL) DeleteUrls(arg0 []repository.URL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUrls", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUrls indicates an expected call of DeleteUrls.
func (mr *MockAddorGetURLMockRecorder) DeleteUrls(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUrls", reflect.TypeOf((*MockAddorGetURL)(nil).DeleteUrls), arg0)
}

// FindAllUserUrls mocks base method.
func (m *MockAddorGetURL) FindAllUserUrls(ctx context.Context, userID string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllUserUrls", ctx, userID)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllUserUrls indicates an expected call of FindAllUserUrls.
func (mr *MockAddorGetURLMockRecorder) FindAllUserUrls(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllUserUrls", reflect.TypeOf((*MockAddorGetURL)(nil).FindAllUserUrls), ctx, userID)
}

// GetOriginalURL mocks base method.
func (m *MockAddorGetURL) GetOriginalURL(ctx context.Context, s string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOriginalURL", ctx, s)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOriginalURL indicates an expected call of GetOriginalURL.
func (mr *MockAddorGetURLMockRecorder) GetOriginalURL(ctx, s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOriginalURL", reflect.TypeOf((*MockAddorGetURL)(nil).GetOriginalURL), ctx, s)
}

// GetShortURL mocks base method.
func (m *MockAddorGetURL) GetShortURL(ctx context.Context, s string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShortURL", ctx, s)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShortURL indicates an expected call of GetShortURL.
func (mr *MockAddorGetURLMockRecorder) GetShortURL(ctx, s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShortURL", reflect.TypeOf((*MockAddorGetURL)(nil).GetShortURL), ctx, s)
}
