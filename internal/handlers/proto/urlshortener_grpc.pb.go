// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.0
// source: proto/urlshortener.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	URLShortener_Short_FullMethodName    = "/handlers.URLShortener/Short"
	URLShortener_UserUrls_FullMethodName = "/handlers.URLShortener/UserUrls"
	URLShortener_Batch_FullMethodName    = "/handlers.URLShortener/Batch"
	URLShortener_DelBatch_FullMethodName = "/handlers.URLShortener/DelBatch"
)

// URLShortenerClient is the client API for URLShortener service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type URLShortenerClient interface {
	Short(ctx context.Context, in *ShortReq, opts ...grpc.CallOption) (*ShortResp, error)
	UserUrls(ctx context.Context, in *UserUrlsReq, opts ...grpc.CallOption) (*UserUrlsResp, error)
	Batch(ctx context.Context, in *BatchReq, opts ...grpc.CallOption) (*BatchResp, error)
	DelBatch(ctx context.Context, in *DelBatchReq, opts ...grpc.CallOption) (*DelBatchResp, error)
}

type uRLShortenerClient struct {
	cc grpc.ClientConnInterface
}

func NewURLShortenerClient(cc grpc.ClientConnInterface) URLShortenerClient {
	return &uRLShortenerClient{cc}
}

func (c *uRLShortenerClient) Short(ctx context.Context, in *ShortReq, opts ...grpc.CallOption) (*ShortResp, error) {
	out := new(ShortResp)
	err := c.cc.Invoke(ctx, URLShortener_Short_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uRLShortenerClient) UserUrls(ctx context.Context, in *UserUrlsReq, opts ...grpc.CallOption) (*UserUrlsResp, error) {
	out := new(UserUrlsResp)
	err := c.cc.Invoke(ctx, URLShortener_UserUrls_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uRLShortenerClient) Batch(ctx context.Context, in *BatchReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, URLShortener_Batch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uRLShortenerClient) DelBatch(ctx context.Context, in *DelBatchReq, opts ...grpc.CallOption) (*DelBatchResp, error) {
	out := new(DelBatchResp)
	err := c.cc.Invoke(ctx, URLShortener_DelBatch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// URLShortenerServer is the server API for URLShortener service.
// All implementations must embed UnimplementedURLShortenerServer
// for forward compatibility
type URLShortenerServer interface {
	Short(context.Context, *ShortReq) (*ShortResp, error)
	UserUrls(context.Context, *UserUrlsReq) (*UserUrlsResp, error)
	Batch(context.Context, *BatchReq) (*BatchResp, error)
	DelBatch(context.Context, *DelBatchReq) (*DelBatchResp, error)
	mustEmbedUnimplementedURLShortenerServer()
}

// UnimplementedURLShortenerServer must be embedded to have forward compatible implementations.
type UnimplementedURLShortenerServer struct {
}

func (UnimplementedURLShortenerServer) Short(context.Context, *ShortReq) (*ShortResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Short not implemented")
}
func (UnimplementedURLShortenerServer) UserUrls(context.Context, *UserUrlsReq) (*UserUrlsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserUrls not implemented")
}
func (UnimplementedURLShortenerServer) Batch(context.Context, *BatchReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Batch not implemented")
}
func (UnimplementedURLShortenerServer) DelBatch(context.Context, *DelBatchReq) (*DelBatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelBatch not implemented")
}
func (UnimplementedURLShortenerServer) mustEmbedUnimplementedURLShortenerServer() {}

// UnsafeURLShortenerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to URLShortenerServer will
// result in compilation errors.
type UnsafeURLShortenerServer interface {
	mustEmbedUnimplementedURLShortenerServer()
}

func RegisterURLShortenerServer(s grpc.ServiceRegistrar, srv URLShortenerServer) {
	s.RegisterService(&URLShortener_ServiceDesc, srv)
}

func _URLShortener_Short_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLShortenerServer).Short(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: URLShortener_Short_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLShortenerServer).Short(ctx, req.(*ShortReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _URLShortener_UserUrls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserUrlsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLShortenerServer).UserUrls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: URLShortener_UserUrls_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLShortenerServer).UserUrls(ctx, req.(*UserUrlsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _URLShortener_Batch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLShortenerServer).Batch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: URLShortener_Batch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLShortenerServer).Batch(ctx, req.(*BatchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _URLShortener_DelBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelBatchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLShortenerServer).DelBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: URLShortener_DelBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLShortenerServer).DelBatch(ctx, req.(*DelBatchReq))
	}
	return interceptor(ctx, in, info, handler)
}

// URLShortener_ServiceDesc is the grpc.ServiceDesc for URLShortener service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var URLShortener_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "handlers.URLShortener",
	HandlerType: (*URLShortenerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Short",
			Handler:    _URLShortener_Short_Handler,
		},
		{
			MethodName: "UserUrls",
			Handler:    _URLShortener_UserUrls_Handler,
		},
		{
			MethodName: "Batch",
			Handler:    _URLShortener_Batch_Handler,
		},
		{
			MethodName: "DelBatch",
			Handler:    _URLShortener_DelBatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/urlshortener.proto",
}
